{
	"parameters" : {
		"host" : "mml.arces.unibo.it" ,
		"ports" : {
			"http" : 8000 ,
			"https" : 8443 ,
			"ws" : 9000 ,
			"wss" : 9443}
		 ,
		"paths" : {
			"query" : "/query" ,
			"update" : "/update" ,
			"subscribe" : "/subscribe" ,
			"register" : "/oauth/register" ,
			"tokenRequest" : "/oauth/token" ,
			"securePath" : "/secure"}
		 ,
		"methods" : {
			"query" : "POST" ,
			"update" : "URL_ENCODED_POST"}
		 ,
		"formats" : {
			"query" : "JSON" ,
			"update" : "HTML"}
		 ,
		"security" : {
			"client_id" : "jaJBrmgtqgW9jTLHeVbzSCH6ZIN1Qaf3XthmwLxjhw3WuXtt7VELmfibRNvOdKLs" ,
			"client_secret" : "fkITPTMsHUEb9gVVRMP5CAeIE1LrfBYtNLdqtlTVZ/CqgqcuzEw+ZcVegW5dMnIg" ,
			"jwt" : "xabtQWoH8RJJk1FyKJ78J8h8i2PcWmAugfJ4J6nMd+1jVSoiipV4Pcv8bH+8wJLJ2yRaVage8/TzdZJiz2jdRP8bhkuNzFhGx6N1/1mgmvfKihLheMmcU0pLj5uKOYWFb+TB98n1IpNO4G69lia2YoR15LScBzibBPpmKWF+XAr5TeDDHDZQK4N3VBS/e3tFL/yOhkfC9Mw45s3mz83oydQazps2cFzookIhydKJWfvx34vSSnhpkfcdYbZ+7KDaK5uCw8It/0FKvsuW0MAboo4X49sDS+AHTOnVUf67wnnPqJ2M1thThv3dIr/WNn+8xJovJWkwcpGP4T7nH7MOCfZzVnKTHr4hN3q14VUWHYkfP7DEKe7LScGYaT4RcuIfNmywI4fAWabAI4zqedYbd5lXmYhbSmXviPTOQPKxhmZptZ6F5Q178nfK6Bik4/0PwUlgMsC6oVFeJtyPWvjfEP0nx9tGMOt+z9Rvbd7enGWRFspUQJS2zzmGlHW1m5QNFdtOCfTLUOKkyZV4JUQxI1CaP+QbIyIihuQDvIMbmNgbvDNBkj9VQOzg1WB7mj4nn4w7T8I9MpOxAXxnaPUvDk8QnL/5leQcUiFVTa1zlzambQ8xr/BojFB52fIz8LsrDRW/+/0CJJVTFYD6OZ/gepFyLK4yOu/rOiTLT5CF9H2NZQd7bi85zSmi50RHFa3358LvL50c4G84Gz7mkDTBV9JxBhlWVNvD5VR58rPcgESwlGEL2YmOQCZzYGWjTc5cyI/50ZX83sTlTbfs+Tab3pBlsRQu36iNznleeKPj6uVvql+3uvcjMEBqqXvj8TKxMi9tCfHA1vt9RijOap8ROHtnIe4iMovPzkOCMiHJPcwbnyi+6jHbrPI18WGghceZQT23qKHDUYQo2NiehLQG9MQZA1Ncx2w4evBTBX8lkBS4aLoCUoTZTlNFSDOohUHJCbeig9eV77JbLo0a4+PNH9bgM/icSnIG5TidBGyJpEkVtD7+/KphwM89izJam3OT" ,
			"expires" : "04/5tRBT5n/VJ0XQASgs/w==" ,
			"type" : "XPrHEX2xHy+5IuXHPHigMw=="}
	}
	 ,
	"graphs" : {
		"default-graph-uri " : "" ,
		"named-graph-uri" : "" ,
		"using-graph-uri" : "" ,
		"using-named-graph-uri" : ""}
	 ,
	"namespaces" : {
		"schema" : "http://schema.org/" ,
		"rdf" : "http://www.w3.org/1999/02/22-rdf-syntax-ns#"}
	 ,
	"updates" : {
		"SEND" : {
			"sparql" : "INSERT {?message rdf:type schema:Message ; schema:text ?text ; schema:sender ?sender ; schema:toRecipient ?receiver; schema:dateSent ?time} WHERE {?sender rdf:type schema:Person . ?receiver rdf:type schema:Person BIND(STR(now()) AS ?time) BIND(IRI(CONCAT(\"http://schema.org/Message-\",STRUUID())) AS ?message)}" ,
			"forcedBindings" : {
				"text" : {
					"type" : "literal" ,
					"value" : ""}
				 ,
				"sender" : {
					"type" : "uri" ,
					"value" : ""}
				 ,
				"receiver" : {
					"type" : "uri" ,
					"value" : ""}
			}
		}
		 ,
		"SET_RECEIVED" : {
			"sparql" : "INSERT {?message schema:dateReceived ?time} WHERE {?message rdf:type schema:Message BIND(STR(now()) AS ?time)}" ,
			"forcedBindings" : {
				"message" : {
					"type" : "uri" ,
					"value" : ""}
			}
		}
		 ,
		"REMOVE" : {
			"sparql" : "DELETE {?message ?p ?o} WHERE {?message rdf:type schema:Message ; schema:dateReceived ?time . ?message ?p ?o}" ,
			"forcedBindings" : {
				"message" : {
					"type" : "uri" ,
					"value" : ""}
				 ,
				"time" : {
					"type" : "literal" ,
					"value" : ""}
			}
		}
		 ,
		"STORE_SENT" : {
			"sparql" : "INSERT DATA {?message rdf:type schema:Message ; schema:text ?text ; schema:sender ?sender ; schema:toRecipient ?receiver; schema:dateSent ?dateSent}" ,
			"forcedBindings" : {
				"dateSent" : {
					"type" : "literal" ,
					"value" : ""}
				 ,
				"message" : {
					"type" : "uri" ,
					"value" : ""}
				 ,
				"text" : {
					"type" : "literal" ,
					"value" : ""}
				 ,
				"sender" : {
					"type" : "uri" ,
					"value" : ""}
				 ,
				"receiver" : {
					"type" : "uri" ,
					"value" : ""}
			}
		}
		 ,
		"STORE_RECEIVED" : {
			"sparql" : "INSERT DATA {?message schema:dateReceived ?dateReceived}" ,
			"forcedBindings" : {
				"dateReceived" : {
					"type" : "literal" ,
					"value" : ""}
				 ,
				"message" : {
					"type" : "uri" ,
					"value" : ""}
			}
		}
		 ,
		"REGISTER_USER" : {
			"sparql" : "INSERT {?id rdf:type schema:Person ; schema:name ?userName} WHERE {BIND(IRI(CONCAT(\"http://schema.org/Person-\",STRUUID())) AS ?id) FILTER NOT EXISTS {?x rdf:type schema:Person . ?x schema:name ?userName}}" ,
			"forcedBindings" : {
				"userName" : {
					"type" : "literal" ,
					"value" : ""}
			}
		}
		 ,
		"DELETE_ALL" : {
			"sparql" : "delete {?s ?p ?o} where {?s ?p ?o}"}
	}
	 ,
	"queries" : {
		"SENT" : {
			"sparql" : "SELECT ?message ?sender ?name ?text ?time WHERE {?message rdf:type schema:Message ; schema:text ?text ; schema:sender ?sender ; schema:toRecipient ?receiver ; schema:dateSent ?time . ?sender rdf:type schema:Person ; schema:name ?name . ?receiver rdf:type schema:Person} ORDER BY ?time" ,
			"forcedBindings" : {
				"receiver" : {
					"type" : "uri" ,
					"value" : ""}
			}
		}
		 ,
		"RECEIVED" : {
			"sparql" : "SELECT ?message ?time WHERE {?message schema:sender ?sender ; schema:dateReceived ?time ; rdf:type schema:Message}" ,
			"forcedBindings" : {
				"sender" : {
					"type" : "uri" ,
					"value" : ""}
			}
		}
		 ,
		"LOG_SENT" : {
			"sparql" : "SELECT ?message ?sender ?receiver ?text ?dateSent WHERE {?message rdf:type schema:Message ; schema:text ?text ; schema:sender ?sender ; schema:toRecipient ?receiver; schema:dateSent ?dateSent . ?sender rdf:type schema:Person . ?receiver rdf:type schema:Person}"}
		 ,
		"LOG_RECEIVED" : {
			"sparql" : "SELECT ?message ?dateReceived WHERE {?message rdf:type schema:Message ; schema:dateReceived ?dateReceived}"}
		 ,
		"USERS" : {
			"sparql" : "SELECT ?user ?userName WHERE {?user rdf:type schema:Person ; schema:name ?userName}"}
		 ,
		"QUERY_ALL" : {
			"sparql" : "select * where {?s ?p ?o}"}
	}
}
